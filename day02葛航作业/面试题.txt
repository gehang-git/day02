5.Object类中常用方法有哪些?
	1.hashCode():计算对象属性的hash值
	2.equals():比较两个对象是否相同
	3.clone():对对象进行克隆
	4.getClass():返回该对象的Class字节码对象
	5.wait():线程阻塞,线程挂起等待,等待唤醒
	6.notify(),notifyAll():唤醒线程,唤醒所有等待的线程
	7.finaLize():调用垃圾回收机制时被回收对象会调用此方法
	8.toString():获取对象的信息,默认返回地址值,一般使用需要重写.
6.面向对象的特征有哪些?
	1.抽象:抽象就是将一类对象的共同特征总结出来构造类的过程,包括数据抽象和行为抽象两方面，抽象只关注对象有哪些属性
	和行为，并不关注实现的细节是什么
	2.封装:  通常认为封装是把数据和操作数据的方法绑定起来，对外只提供已经定义好的接口。面向对象的本质就是将现实世界
	描绘成一系列完全自治的封闭对象。我们在类中编写的方法就是对实现细节的一种封装，我们编写类时就是对数据和操作数据的封装，
	简单来说，封装就是隐藏一切可以隐藏的东西，只向外界提供最简单的编程接口。
	3.继承:继承就是从已有类得到继承信息创建新类的过程，提供继承信息的类被称为父类，超类或者基类，获得继承信息的类被称为子类
	或者派生类。继承让变化中的软件系统有了一定的可延续性，同时也是封装程序中可变因素的重要手段。
	4.多态:多态就是允许不同子类型对同一消息做出响应，就是同一对象引用同样的方法却做了不同的事情。多态分为运行时多态和编译时
	多态，如果将类中的方法视为向外界提供的服务，那么运行时的多态性可以理解为:A系统想要访问B系统提供的服务，B系统有多种提供
	服务的方式，但对A来说都是透明的。比如A系统是电动剃须刀系统，B系统是供电系统,A系统只能访问B系统提供的服务，B系统有多种
	供电方式（交流电，电池，太阳能）,但这一切对A来说都是透明的，A系统不知道究竟是何种方式获得了动力。方法的重载就是编译时的
	多态性，也称前绑定，方法的重写就是运行时的多态性，也叫后绑定。
7.多态的好处及如何实现多态
	多态就是允许不同子类型对同意消息做出不同的响应，即同一消息可以根据发送对象的不用而采用多种不同的行为方式（发送消息就是函数调用）
	多态的好处有:
	1.可替换性:多态对已存在的代码具有替换性。
	2.可扩充性:增加新的子类时不会对现有类的结构产生影响
	3.灵活性
	4.接口性:多态是超类通过方法签名,向子类提供接口，由子类重写实现
	5.简化性
	实现多态的方式:
	1.实现接口
	2.继承父类，重写方法
	3.同一类中进行方法的重载
8.抽象类和接口的区别
	1.抽象类是单继承，接口是多实现。
	2.抽象类中有构造方法，需要访问父类成员进行初始化，而接口中没有构造方法。
	3.抽象类中可以有普通成员变量，也可以有常量。但接口中的变量全是常量，默认修饰符public static final
	4.抽象类中可以有抽象方法，也可以有普通方法，但有抽象方法的类必须被定义为抽象类。接口中的方法全是抽象方法，默认修饰符public abstract
	5.抽象类中抽象方法可以被public、protected和default等修饰，但接口的抽象方法只能被public修饰